diff --git a/src/main.c b/src/main.c
index e1e71ea..52843cd 100644
--- a/src/main.c
+++ b/src/main.c
@@ -63,6 +63,7 @@ const char *prelink_cache = PRELINK_CACHE;
 const char *undo_output;
 int noreexecinit;
 time_t initctime;
+const char *sysroot;
 
 const char *argp_program_version = "prelink 1.0";
 
@@ -83,6 +84,7 @@ static char argp_doc[] = "prelink -- program to relocate and prelink ELF shared
 #define OPT_SHA			0x8a
 #define OPT_COMPUTE_CHECKSUM	0x8b
 #define OPT_LAYOUT_PAGE_SIZE	0x8c
+#define OPT_SYSROOT             0x8d
 
 static struct argp_option options[] = {
   {"all",		'a', 0, 0,  "Prelink all binaries" },
@@ -100,6 +102,7 @@ static struct argp_option options[] = {
   {"quick",		'q', 0, 0,  "Quick scan" },
   {"random",		'R', 0, 0,  "Choose random base for libraries" },
   {"reloc-only",	'r', "BASE_ADDRESS", 0,  "Relocate library to given address, don't prelink" },
+  {"root",              OPT_SYSROOT, "ROOT_PATH", 0, "Prefix all paths with ROOT_PATH" },
   {"undo",		'u', 0, 0,  "Undo prelink" },
   {"verbose",		'v', 0, 0,  "Produce verbose output" },
   {"verify",		'y', 0, 0,  "Verify file consistency by undoing and redoing prelink and printing original to standard output" },
@@ -239,6 +242,9 @@ parse_opt (int key, char *arg, struct argp_state *state)
       if (endarg != strchr (arg, '\0') || (layout_page_size & (layout_page_size - 1)))
 	error (EXIT_FAILURE, 0, "--layout-page-size option requires numberic power-of-two argument");
       break;
+    case OPT_SYSROOT:                                                           
+      sysroot = arg;                                                            
+      break;
     case 'i':
       noreexecinit=1;
       break;
@@ -355,6 +361,14 @@ main (int argc, char *argv[])
   if ((undo || verify) && quick)
     error (EXIT_FAILURE, 0, "--undo and --quick options are incompatible");
 
+  if (sysroot) 
+    {
+      sysroot = canonicalize_file_name (sysroot);
+      if (sysroot == NULL)
+        error (EXIT_FAILURE, 0, "Could not canonicalize --root argument");
+      asprintf ((char **) &prelink_conf, "%s%s", sysroot, prelink_conf);
+    }
+
   if (print_cache)
     {
       prelink_load_cache ();
